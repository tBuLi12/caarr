#version 450

#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_vote: enable

layout (local_size_x = 64) in;

struct Rect {
    uvec2 pos;
    uvec2 size;
    vec4 bg_color;
    uint parent_idx;
    uint children_start;
    uint children_end;
};

layout(set = 0, binding = 0) readonly buffer Rects {
    Rect data[];
} rects;

layout(set = 0, binding = 1, rgba8) uniform image2D image;

layout(set = 0, binding = 2) writeonly buffer VerticalRaster {
    uint data[];
} vertical;

layout(set = 0, binding = 3) writeonly buffer HorizontalRaster {
    uint data[];
} horizontal;

void main() {
    const uint chunk_size = 3;

    // uvec2 sg_size = uvec2(gl_SubgroupSize / 8, 8);
    
    // uint rects_count = gl_NumWorkGroups.x * gl_WorkGroupSize.x;
    uint rects_count = 10000;

    uint rect_idx = gl_GlobalInvocationID.x;
    Rect rect = rects.data[rect_idx];
    uvec2 pos = rect.pos / chunk_size;
    uvec2 size = (rect.size + (chunk_size - rect.size % chunk_size)) / chunk_size;
    // uvec2 size = rect.size / chunk_size;
    uvec2 pos_end = pos + size;
    
    for (uint i = pos.x; i <= pos_end.x; i++) {
        atomicOr(horizontal.data[(i * rects_count) + (rect_idx / 32)], 1 << (rect_idx % 32));
    }

    for (uint i = pos.y; i <= pos_end.y; i++) {
        atomicOr(vertical.data[(i * rects_count) + (rect_idx / 32)], 1 << (rect_idx % 32));
    }
}
  