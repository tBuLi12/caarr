#version 450

#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_vote: enable

layout (local_size_x = 32, local_size_y = 32) in;

struct Rect {
    vec2 pos;
    vec2 size;
    vec4 bg_color;
    uvec2 tex_position;
    uint parent_idx;
    uint children_start;
    uint children_end;
    uint fill_kind;
};

layout(set = 0, binding = 0) readonly buffer Rects {
    Rect data[];
} rects;

layout (set = 0, binding = 1, rgba8) uniform image2D image;

layout (set = 0, binding = 2, rgba8) uniform image2D atlas;

vec3 getColor(uvec2 px) {
    uvec2 offset = uvec2(0);
    uint rect_idx = 0;
    uint current_idx = 0;
    uint end_idx = 1;

    vec3 color = vec3(0.0);
    vec3 alphas = vec3(0.0);

    while (current_idx < end_idx) {
        Rect rect = rects.data[current_idx];
        uvec2 pos = offset + uvec2(rect.pos);
        uvec2 pos_end = pos + uvec2(rect.size);

        if (all(greaterThanEqual(px, pos)) && all(lessThan(px, pos_end))) {
            offset = pos;
            rect_idx = current_idx + 1;
            current_idx = rect.children_start;
            end_idx = rect.children_end;
        } else {
            current_idx += 1;
        }

        while (current_idx >= end_idx && rect_idx != 0) {
            current_idx = rect_idx;
            Rect parent = rects.data[current_idx - 1];

            
            vec3 rect_color = parent.bg_color.rgb;
            vec3 rect_alphas = parent.bg_color.aaa;

            if (parent.fill_kind == 1) {
                rect_alphas = imageLoad(atlas, ivec2(parent.tex_position + px - offset)).bgr;
                rect_color = parent.bg_color.rgb;
            }

            vec3 a = rect_alphas * (vec3(1.0) - alphas);
            color += rect_color * a;
            alphas += a;

            // if (all(greaterThanEqual(alphas, vec3(0.8)))) {
            //     return color;
            // }

            offset -= uvec2(parent.pos);

            rect_idx = parent.parent_idx;
            if (parent.parent_idx == 0) {
                end_idx = 1;
            } else {
                end_idx = rects.data[parent.parent_idx - 1].children_end;
            }
        }
    }

    return color;
}

void main() {
    uvec2 px = gl_GlobalInvocationID.xy;
    vec3 color = getColor(px);
    imageStore(image, ivec2(px), vec4(color, 1.0));
}
